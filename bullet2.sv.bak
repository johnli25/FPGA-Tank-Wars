module  bullet ( input Reset, frame_clk, 

					input logic [9:0] ballX, ballY,
					input [7:0] keycode,
               output [9:0]  bulletX, bulletY, bulletSx, bulletSy,
					output [1:0] bulletOn);
    
    
	 
	 
	 //In order to make a bullet we need the ball x and y, reset, keycode, we will output the the position of the bullet
	 
	 
	 logic [9:0] bullet_X_Pos, bullet_X_Motion, bullet_Y_Pos, bullet_Y_Motion, bulletx_Size, bullety_Size;
	 logic [1:0] bullet_on; 
	 logic flag;
//	 logic [10:0] 
	 
    parameter [9:0] bullet_X_Center=320;  // Center position on the X axis
    parameter [9:0] bullet_Y_Center=240;  // Center position on the Y axis
    parameter [9:0] bullet_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] bullet_X_Max=639;     // Rightmost point on the X axis
    parameter [9:0] bullet_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] bullet_Y_Max=479;     // Bottommost point on the Y axis
    parameter [9:0] bullet_X_Step=1;      // Step size on the X axis
    parameter [9:0] bullet_Y_Step=1;      // Step size on the Y axis

    assign bulletx_Size = 10;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
	 assign bullety_Size = 20;

    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_bullet
        if (Reset)  // Asynchronous Reset
        begin 
            bullet_Y_Motion <= 10'd0; //bullet_Y_Step;
				bullet_X_Motion <= 10'd0; //bullet_X_Step;
				bullet_Y_Pos <= ballX;
				bullet_X_Pos <= ballY;
				flag = 1'b0;
        end
        
        else 
        begin 
		  /*
				 if ( (bullet_Y_Pos + bullety_Size) >= bullet_Y_Max )  // bullet is at the bottom edge, BOUNCE!
					  bullet_Y_Motion <= (~ (bullet_Y_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (bullet_Y_Pos - bullety_Size) <= bullet_Y_Min )  // bullet is at the top edge, BOUNCE!
					  bullet_Y_Motion <= bullet_Y_Step;
					  
				  else if ( (bullet_X_Pos + bulletx_Size) >= bullet_X_Max )  // bullet is at the Right edge, BOUNCE!
					  bullet_X_Motion <= (~ (bullet_X_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (bullet_X_Pos - bulletx_Size) <= bullet_X_Min )  // bullet is at the Left edge, BOUNCE!
					  bullet_X_Motion <= bullet_X_Step;
					  
				 else 
					  bullet_Y_Motion <= bullet_Y_Motion;  // bullet is somewhere in the middle, don't bounce, just keep moving
				*/	
		       
				 
				 case (keycode)
				 
				 8'h2c : begin //spacebar
							  //declare bullet here
							  bullet_Y_Motion <= -8; //20
							  bullet_on = 1'b1;
							  bullet_Y_Pos <= (ballY-20);  // Update bullet position, have it move up everytime
							  bullet_X_Pos <= (ballX);
							  flag <= 1'b0;  
						   end
							  
			    default: 
				 begin
					if ((bullet_Y_Pos - bullety_Size) <= bullet_Y_Min )  // bullet is at the top edge, BOUNCE!
					  begin
						bullet_Y_Pos <= (ballY-20);  // Update bullet position, have it move up everytime
						bullet_X_Pos <= (ballX);
						bullet_Y_Motion <= 0;
						bullet_on = 1'b0;
						flag <= 1'b1;
						
					  end
					else
					  begin
					  
					   if (flag == 1'b1) //"hiding" condition
							begin
							bullet_on = 1'b0;
							bullet_Y_Pos <= (ballY-20);  // Update bullet position, have it move up everytime
							bullet_X_Pos <= (ballX);
							bullet_Y_Motion = 0;
							end
						
						else 
							begin
							bullet_Y_Pos <= (bullet_Y_Pos + bullet_Y_Motion);
							bullet_on = 1'b1;
							end
					 end
				 end
			    endcase	
					
				 
							  
		end  
    end
       
    assign bulletX = bullet_X_Pos;
   
    assign bulletY = bullet_Y_Pos;
   
    assign bulletSx = bulletx_Size;
	 
	 assign bulletSy = bullety_Size;
	 
	 assign bulletOn = bullet_on;
	 
endmodule